<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | E(X)PECTED P(A)YOFF]]></title>
  <link href="http://expectedpayoff.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://expectedpayoff.com/"/>
  <updated>2014-04-22T17:54:15-07:00</updated>
  <id>http://expectedpayoff.com/</id>
  <author>
    <name><![CDATA[Byron Gibson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to checksum and install source tarballs in Docker]]></title>
    <link href="http://expectedpayoff.com/blog/2014/04/22/how-to-checksum-and-install-source-tarballs-in-docker/"/>
    <updated>2014-04-22T16:52:00-07:00</updated>
    <id>http://expectedpayoff.com/blog/2014/04/22/how-to-checksum-and-install-source-tarballs-in-docker</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re writing a Dockefile that downloads, builds, and installs a source package, say
node.js, nginx, haskell, whatever, you&rsquo;ll most likely want your Dockerfile to checksum that
package and exit on fail.</p>

<p>Docker doesn&rsquo;t have a built-in way to do this, and it <a href="https://github.com/dotcloud/docker/issues/2579">doesn&rsquo;t appear as if it is going
to get one any time soon</a>, so here&rsquo;s how to script it manually:</p>

<p>````</p>

<h1>Docker official ubuntu 12.04 LTS</h1>

<p>FROM ubuntu:12.04</p>

<h1>SETUP</h1>

<p>RUN cd /tmp
RUN apt-get update -y
RUN apt-get install wget build-essential automake -y
RUN wget <a href="http://nodejs.org/dist/latest/node-v0.10.26.tar.gz">http://nodejs.org/dist/latest/node-v0.10.26.tar.gz</a>
RUN wget <a href="http://nodejs.org/dist/latest/SHASUMS256.txt">http://nodejs.org/dist/latest/SHASUMS256.txt</a></p>

<h1>CHECKSUM</h1>

<h1>RUN checksum: continue on success, exit Docker build on fail.  Requires some</h1>

<h1>script-fu to reduce output down to a single 0 or non-zero POSIX exit code.</h1>

<h1>Details in footnote <a href="https://github.com/dotcloud/docker/issues/2579">1</a>.  TLDR: run checksum, merge sderr into sdout (2>$1) before</h1>

<h1>piping stout to grep, grep for checksum success code OK, suppress all output except</h1>

<h1>exit codes with -qs flags on grep.  Returns 0 exit code if checksum succeeds, 1 if</h1>

<h1>not.  Docker breaks and exits on non-zero exit code.</h1>

<p>RUN sha256sum -c SHASUM256.txt 2>&amp;1|grep -qs OK</p>

<h1>INSTALL</h1>

<p>RUN tar -xvf node-v0.10.26.tar.gz &amp;&amp; cd node-v0.10.26
RUN ./configure &amp;&amp; make &amp;&amp; make install</p>

<h1>CLEANUP</h1>

<p>RUN apt-get purge wget build-essential automake -y &amp;&amp; apt-get autoremove -y
````</p>

<p>Docker automatically exits Dockerfile build if any RUN command returns a non-zero
(error) exit code.</p>

<p>The problem here is that node.js&rsquo;s SHASUMS256.txt contains many lines
for lots of different files &ndash; source, binaries for different platforms, etc. &ndash; only
one of which will succeed at this checksum and return 0 exit code.  All other lines
will fail and be sent to sderr.  sterr is not included by default in pipes, only sdout,
causing this command to return a jumble error data prior to the pipe.  Docker then
interprets this as non-zero error codes and exits, even if the checksum succeeds.</p>

<p>The solution is to manually merge sderr into stout, then pipe to grep, grep for the OK
(case sensitive), and suppress all output except exit codes with -qs.  If OK is
is present in the combined output, this line will return a 0 exit code.  If not,
will return 1 and the Dockerfile build will break and exit.</p>

<p>You can test this process manually by running a Docker container in interactive mode:</p>

<p>````</p>

<blockquote><p>sudo docker run -i -t ubuntu:12.04 bin/bash
````</p></blockquote>

<p>Run the SETUP and CHECKSUM parts, then then check the CHECKSUM&rsquo;s exit code with <code>echo $?</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Multiple Java, Scala, Haskell, etc. packages in Debian with Update Alternatives]]></title>
    <link href="http://expectedpayoff.com/blog/2012/06/08/manage-multiple-java/"/>
    <updated>2012-06-08T13:53:00-07:00</updated>
    <id>http://expectedpayoff.com/blog/2012/06/08/manage-multiple-java</id>
    <content type="html"><![CDATA[<p>Sun/Oracle Java was <a href="http://askubuntu.com/questions/67909/how-do-i-install-oracle-jdk-6">removed from Linux distros</a> in 2011 due to licensing issues.<br/>
It can only be downloaded directly from Oracle&rsquo;s website now and installed manually.
There are many different ways of doing that, but for Debian and Debian-derivatives,
I prefer using Debian&rsquo;s excellent <code>update-alternatives</code> tool.</p>

<!-- more -->


<h4><a href="https://github.com/byrongibson/scripts/tree/master/install/haskell#readme">How To</a></h4>

<ol>
<li><p>Download the package, extract or build to <code>/usr/lib/jvm/[version]</code>,
<code>/opt/java/[version]</code>, <code>/opt/scala/[version]</code>, <code>/opt/haskell/[version]</code>,
or anywhere else in the system file system (except <code>~/</code>).</p></li>
<li><p>Change owner:group to root:root</p></li>
</ol>


<p><code>
sudo chown -Rv root:root /opt/java/[version]
</code></p>

<ol>
<li>Run the <code>update-alternatives</code> script (<a href="https://github.com/byrongibson/scripts/tree/master/install/java">Java</a>, <a href="https://github.com/byrongibson/scripts/tree/master/install/scala">Scala</a>, <a href="https://github.com/byrongibson/scripts/tree/master/install/haskell">Haskell</a>). Feel
free to fork and modify for other languages.</li>
</ol>


<p>See my installation guide for <a href="https://github.com/byrongibson/scripts/tree/master/install/haskell#readme">Haskell</a> for more details. The same process works
for any package.  The tricky part is writing the <code>update-alternatives</code> script, but it
should be clear how it works upon closer inspection of those scripts.</p>

<p>The <code>update-alternatives</code> commands take the form:</p>

<p>{% codeblock Install %}
update-alternatives &mdash;install [destination] [identifier] [source] [priority] \
 &mdash;slave [destination] [identifier] [source] \
 &hellip;
 &mdash;slave [destination] [identifier] [source]
{% endcodeblock %}</p>

<p>{% codeblock Change active package %}
update-alternatives &mdash;config [identifier]
{% endcodeblock %}</p>

<p>{% codeblock Remove all %}
update-alternatives &mdash;remove [identifier]
{% endcodeblock %}</p>

<p>{% gist 2898928 %}</p>

<p>Read on for why&hellip;</p>

<!-- more -->


<h4><a href="https://github.com/byrongibson/scripts/tree/master/install/haskell#readme">Why?</a></h4>

<ol>
<li><p>It can be used with any package, not just Java.  I currently use it to manage
multiple versions of Java, Scala, Haskell GHC, Haskell Platform, Ant, and Maven.</p></li>
<li><p>Debian repos are known for providing stable software, but sometimes at the cost of
being up to date.  Great for production machines, not so great when you want to
experiment with the latest and greatest on your dev box.  <code>update-alternatives</code>
solves that, by letting you easily bypass the repos to manually add current versions
of software to the system (linking them into /usr/bin/, /usr/lib, /usr/share, etc.)
without conflicting with the version from the repos.  With <code>update-alternatives</code> you
can install both, and toggle among the active one depending on what you&rsquo;re working on.</p></li>
<li><p>Upgrade to a new version without deleting the old.  Both can co-exist on the system
at the same time, unlike installing the software via repo.  If the new version breaks
something that depends on it, easily rollback to the prior version with just a
<code>sudo update-alternatives --config</code>.</p></li>
<li><p>Keep your system cleaner by putting software in a single location like
/opt/java/jdk/1.6.0_34 and soft linking it to system directories like /usr/bin,
/usr/lib, /usr/share, etc.  A typical *nix install is messy &ndash; files are deposited
throughout the system in /usr/bin, /usr/lib, /usr/share, etc.  <code>update-alternatives</code>
solves that problem.</p></li>
<li><p>Easily uninstall any package.  For example, switch the current active package to
another version with <code>update-alternatives --config java</code> and delete the unwanted one
with <code>rm -rf /opt/java/jdk/1.7.0_04</code>.</p></li>
<li><p>Run the software via System PATH instead of user PATH.  <code>update-alternatives</code>
automatically installs software to the system path it is designed for, usually
/usr/bin.</p></li>
</ol>


<h4>Final Thoughts</h4>

<p>This system reminds me a bit of <a href="http://www.gobolinux.org/">Gobo Linux</a>, which seeks to [redesign the Linux
filesystem][7] by putting full package distributions in a single location, like
<code>/Programs/Bash/3.0</code>.  A great idea that would make Linux much more user-friendly.
<code>update-alternatives</code> is one small step in that direction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Linux is better than Windows]]></title>
    <link href="http://expectedpayoff.com/blog/2012/06/07/why-linux-is-better-than-windows/"/>
    <updated>2012-06-07T21:42:00-07:00</updated>
    <id>http://expectedpayoff.com/blog/2012/06/07/why-linux-is-better-than-windows</id>
    <content type="html"><![CDATA[<p><a href="http://www.whylinuxisbetter.net/">The ways in which Linux &gt; Windows:</a></p>

<ol>
<li>More stable</li>
<li>Less virus, trojan, &amp; security risk</li>
<li>Security through <a href="http://en.wikipedia.org/wiki/Security_through_transparency">transparency</a> and (for now)<a href="http://en.wikipedia.org/wiki/Security_through_minority#Security_through_minority">minority</a> vs <a href="http://en.wikipedia.org/wiki/Security_through_obscurity">Security through obscurity</a></a></li>
<li><a href="http://c2.com/cgi/wiki?GratisSoftware">free</a></li>
<li><a href="http://en.wikipedia.org/wiki/Gratis_versus_Libre%22">Free</a></li>
<li>Update all your software, not just the OS, with one-click</li>
<li>Tens of thousands ofeasy-to-getf/Free software packages available in the online, repositories</li>
<li>Next-generation desktops (Compiz Fusion, etc.)</li>
<li>Never defragment your hard drive again</li>
<li>Your system never slows down over months and years of useage</li>
<li>Theme your desktop (with more than just 3 themes)</li>
<li>Less ecological impact &ndash; no boxed software, no CDs, download everything online.</li>
<li>Be part of an emerging global community</li>
<li><a href="http://www.whylinuxisbetter.net/">More&hellip;</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
